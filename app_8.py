# -*- coding: utf-8 -*-
"""
Created on Thu May  1 18:29:15 2025

@author: jahop
"""

import streamlit as st
import feedparser
import pandas as pd
import spacy
from urllib.parse import quote

# Cargar modelo de spaCy (debe estar especificado en requirements.txt)
try:
    nlp = spacy.load("es_core_news_sm")
except:
    st.error("Error al cargar el modelo de spaCy. Verifica que est√© correctamente instalado.")
    st.stop()

# Lista de estados mexicanos
estados_mexicanos = [
    "Aguascalientes", "Baja California", "Baja California Sur", "Campeche", "CDMX", "Ciudad de M√©xico",
    "Chiapas", "Chihuahua", "Coahuila", "Colima", "Durango", "Estado de M√©xico", "Guanajuato", "Guerrero",
    "Hidalgo", "Jalisco", "Michoac√°n", "Morelos", "Nayarit", "Nuevo Le√≥n", "Oaxaca", "Puebla", "Quer√©taro",
    "Quintana Roo", "San Luis Potos√≠", "Sinaloa", "Sonora", "Tabasco", "Tamaulipas", "Tlaxcala", "Veracruz",
    "Yucat√°n", "Zacatecas"
]

def detectar_estado(texto):
    doc = nlp(texto)
    for ent in doc.ents:
        if ent.label_ == "LOC" or ent.label_ == "GPE":
            for estado in estados_mexicanos:
                if estado.lower() in ent.text.lower():
                    return estado
    return None

def buscar_noticias_nlp(consulta):
    url = f"https://news.google.com/rss/search?q={quote(consulta)}&hl=es-419&gl=MX&ceid=MX:es-419"
    feed = feedparser.parse(url)
    
    noticias = []
    for entry in feed.entries:
        texto = entry.title + " " + entry.summary
        estado_detectado = detectar_estado(texto)
        if estado_detectado:
            noticias.append({
                "T√≠tulo": entry.title,
                "Publicado": entry.published,
                "Resumen": entry.summary,
                "Estado Detectado": estado_detectado,
                "Enlace": entry.link
            })
    return pd.DataFrame(noticias)

# Interfaz en Streamlit
st.set_page_config(page_title="PROFEPA - Detecci√≥n Ambiental", layout="wide")




# Secci√≥n de descarga del manual
with open("manual.pdf", "rb") as pdf_file:
    st.sidebar.download_button(
        label="üìò Descargar Manual de Usuario (PDF)",
        data=pdf_file,
        file_name="manual.pdf",
        mime="application/pdf"
    )

# Secci√≥n de Sidebar para Ayuda
st.sidebar.title("Ayuda")
st.sidebar.markdown("""
    **Aplicaci√≥n de Monitor de Incidentes Ambientales en M√©xico**
    
    Esta aplicaci√≥n permite realizar un an√°lisis en tiempo real de noticias relacionadas con incidentes ambientales en M√©xico.
    
    üõ† **¬øC√≥mo funciona?**
    - Introduce una palabra clave relacionada con incidentes ambientales (como "derrame de petr√≥leo" o "incendio forestal") en el campo de b√∫squeda.
    - El sistema buscar√° noticias relevantes en fuentes abiertas y utilizar√° **Procesamiento de Lenguaje Natural (NLP)** para identificar las menciones a los **estados de M√©xico** en las noticias.
    - Se muestra un ranking con los estados con m√°s incidentes, y podr√°s hacer clic en los enlaces para leer las noticias completas.

    üîç **Objetivo de la aplicaci√≥n**
    - Monitorear de manera r√°pida y sencilla los incidentes ambientales ocurridos en distintos estados de la Rep√∫blica Mexicana.
    - Facilitar la toma de decisiones para acciones de prevenci√≥n o mitigaci√≥n a trav√©s de informaci√≥n en tiempo real.

    üìä **¬øQu√© puedes hacer?**
    - Buscar noticias en tiempo real sobre incidentes ambientales.
    - Ver el ranking de estados con m√°s incidentes reportados.
    - Descargar los resultados en formato CSV para un an√°lisis posterior.

    **¬°Usa esta herramienta para estar informado sobre los incidentes ambientales en M√©xico!**
""")

# T√≠tulo principal
st.title("üåé PROFEPA: Monitor de Incidentes Ambientales en M√©xico (NLP)")

# Entrada de consulta
query = st.text_input("üîç Palabra clave (ej: derrame petr√≥leo, incendio forestal):", "incendio forestal")

if st.button("Buscar noticias"):
    with st.spinner("Buscando y analizando noticias..."):
        df = buscar_noticias_nlp(query)
        
        if not df.empty:
            # Mostrar noticias encontradas
            st.success(f"Se encontraron {len(df)} noticias relevantes.")
            st.dataframe(df)
            
            # Convertir la columna 'Enlace' en clickeable
            def make_clickable(val):
                return f'<a href="{val}" target="_blank">Abrir Noticia</a>'
            df['Enlace'] = df['Enlace'].apply(make_clickable)
            st.markdown(df.to_html(escape=False), unsafe_allow_html=True)

            # Descargar el CSV
            st.download_button("üì• Descargar CSV", df.to_csv(index=False), "noticias_nlp_mexico.csv")

            # Crear un ranking de estados con m√°s incidentes
            estado_counts = df['Estado Detectado'].value_counts().reset_index()
            estado_counts.columns = ['Estado', 'Cantidad de Incidentes']
            st.subheader("Ranking de Estados con M√°s Incidentes Ambientales")
            st.dataframe(estado_counts)

            # Visualizaci√≥n del ranking con un gr√°fico de barras
            st.bar_chart(estado_counts.set_index('Estado')['Cantidad de Incidentes'])
        
        else:
            st.warning("No se encontraron noticias relevantes en M√©xico para esa palabra clave.")

# Desarrollado por: Javier Horacio P√©rez Ric√°rdez
st.markdown("<br><hr><br>", unsafe_allow_html=True)
st.markdown("### Desarrollado por: **Javier Horacio P√©rez Ric√°rdez**", unsafe_allow_html=True)

# Tambi√©n en la barra lateral
st.sidebar.markdown("### Desarrollado por: **Javier Horacio P√©rez Ric√°rdez**")
